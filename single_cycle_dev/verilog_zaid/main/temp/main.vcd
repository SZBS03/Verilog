$date
	Mon Dec  2 17:09:54 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module MAIN_tb $end
$var reg 1 ! RW $end
$var reg 1 " clk $end
$var reg 32 # dataIN [31:0] $end
$var reg 1 $ en $end
$var reg 1 % rst $end
$scope module u_MAIN $end
$var wire 1 ! RW $end
$var wire 1 " clk $end
$var wire 32 & dataIN [31:0] $end
$var wire 1 $ en $end
$var wire 1 % rst $end
$var wire 32 ' write_data [31:0] $end
$var wire 5 ( rs2 [4:0] $end
$var wire 5 ) rs1 [4:0] $end
$var wire 1 * regWrite $end
$var wire 32 + read_data2 [31:0] $end
$var wire 32 , read_data1 [31:0] $end
$var wire 5 - rd [4:0] $end
$var wire 1 . operandB $end
$var wire 1 / operandA $end
$var wire 1 0 memWrite $end
$var wire 1 1 memToReg $end
$var wire 32 2 load_write [31:0] $end
$var wire 32 3 instMemOUT [31:0] $end
$var wire 32 4 imm_gen_inst [31:0] $end
$var wire 32 5 dataMemOUT [31:0] $end
$var wire 5 6 counter_address [4:0] $end
$var wire 32 7 aluOut [31:0] $end
$var wire 6 8 aluOP [5:0] $end
$var wire 32 9 PC [31:0] $end
$var wire 32 : OpB [31:0] $end
$var wire 32 ; OpA [31:0] $end
$scope module o_register $end
$var wire 1 " clk $end
$var wire 1 % reset $end
$var wire 32 < write_data [31:0] $end
$var wire 5 = rs2_data [4:0] $end
$var wire 5 > rs1_data [4:0] $end
$var wire 1 * regWrite $end
$var wire 5 ? rd_data [4:0] $end
$var reg 32 @ read_data1 [31:0] $end
$var reg 32 A read_data2 [31:0] $end
$var integer 32 B i [31:0] $end
$upscope $end
$scope module u_ControlDecode $end
$var wire 5 C rs2 [4:0] $end
$var wire 5 D rs1 [4:0] $end
$var wire 5 E rd [4:0] $end
$var wire 7 F opcode [6:0] $end
$var wire 32 G instruction [31:0] $end
$var wire 7 H func7 [6:0] $end
$var wire 3 I func3 [2:0] $end
$var reg 6 J aluOP [5:0] $end
$var reg 1 K branch $end
$var reg 32 L imm_gen_inst [31:0] $end
$var reg 1 M jalEN $end
$var reg 1 N jalrEN $end
$var reg 1 1 memToReg $end
$var reg 1 0 memWrite $end
$var reg 1 / operandA $end
$var reg 1 . operandB $end
$var reg 1 * regWrite $end
$upscope $end
$scope module u_Counter $end
$var wire 1 " clk $end
$var wire 32 O o [31:0] $end
$var wire 1 % rst $end
$var reg 32 P out [31:0] $end
$upscope $end
$scope module u_DMI $end
$var wire 32 Q LW [31:0] $end
$var wire 6 R aluOP [5:0] $end
$var wire 32 S load [31:0] $end
$var wire 16 T LHU [15:0] $end
$var wire 16 U LH [15:0] $end
$var wire 8 V LBU [7:0] $end
$var wire 8 W LB [7:0] $end
$var reg 32 X load_data [31:0] $end
$upscope $end
$scope module u_RAM1 $end
$var wire 5 Y address [4:0] $end
$var wire 1 " clk $end
$var wire 32 Z dataIN [31:0] $end
$var wire 1 ! readWrite $end
$var reg 32 [ dataOUT [31:0] $end
$upscope $end
$scope module u_RAM2 $end
$var wire 5 \ address [4:0] $end
$var wire 1 " clk $end
$var wire 32 ] dataIN [31:0] $end
$var wire 1 0 readWrite $end
$var reg 32 ^ dataOUT [31:0] $end
$upscope $end
$scope module u_alu $end
$var wire 32 _ a [31:0] $end
$var wire 32 ` b [31:0] $end
$var wire 6 a opcode [5:0] $end
$var reg 32 b c [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
b100 O
xN
xM
bx L
xK
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
x1
x0
x/
x.
bx -
bx ,
bx +
x*
bx )
bx (
bx '
bx &
0%
1$
bx #
1"
0!
$end
#5
b0 6
b0 Y
b0 9
b0 P
1%
0"
#10
b100000 B
1"
#15
0"
b10000000000000010010011 #
b10000000000000010010011 &
b10000000000000010010011 Z
0%
#20
b1 6
b1 Y
b100 9
b100 P
1"
#25
0"
b10100000000000100010011 #
b10100000000000100010011 &
b10100000000000100010011 Z
#30
b10 6
b10 Y
b1000 9
b1000 P
1"
#35
0"
b1000000000100010000001000110011 #
b1000000000100010000001000110011 &
b1000000000100010000001000110011 Z
#40
b11 6
b11 Y
b1100 9
b1100 P
1"
#45
0"
1!
#50
b100 '
b100 <
b1 \
b100 7
b100 b
b0 :
b0 `
b100 ;
b100 _
b0 +
b0 A
b0 ]
b0 ,
b0 @
0M
0N
b101 8
b101 J
b101 R
b101 a
0K
0.
1/
00
01
1*
b100 (
b100 =
b100 C
b0 )
b0 >
b0 D
b1 -
b1 ?
b1 E
b0 H
b0 I
b10011 F
b100 4
b100 L
b100 6
b100 Y
b10000000000000010010011 3
b10000000000000010010011 G
b10000000000000010010011 [
b10000 9
b10000 P
1"
#55
0"
#60
b101 '
b101 <
b101 7
b101 b
b101 ;
b101 _
b101 (
b101 =
b101 C
b10 -
b10 ?
b10 E
b101 4
b101 L
b101 6
b101 Y
b10100000000000100010011 3
b10100000000000100010011 G
b10100000000000100010011 [
b10100 9
b10100 P
1"
#65
0"
#70
b1 '
b1 <
b0 \
b1 7
b1 b
b100 :
b100 `
b10011 8
b10011 J
b10011 R
b10011 a
0/
1*
b101 ;
b101 _
b100 +
b100 A
b100 ]
b101 ,
b101 @
b1 (
b1 =
b1 C
b10 )
b10 >
b10 D
b100 -
b100 ?
b100 E
b100000 H
b110011 F
b0 4
b0 L
b110 6
b110 Y
b1000000000100010000001000110011 3
b1000000000100010000001000110011 G
b1000000000100010000001000110011 [
b11000 9
b11000 P
1"
#75
0"
#80
b0 '
b0 <
bx :
bx `
bx ;
bx _
b0 7
b0 b
bx +
bx A
bx ]
bx ,
bx @
b0 8
b0 J
b0 R
b0 a
0*
bx (
bx =
bx C
bx )
bx >
bx D
bx -
bx ?
bx E
bx H
bx I
bx F
b111 6
b111 Y
bx 3
bx G
bx [
b11100 9
b11100 P
1"
#85
0"
#90
b1000 6
b1000 Y
b100000 9
b100000 P
1"
#95
0"
#100
b1001 6
b1001 Y
b100100 9
b100100 P
1"
#105
0"
#110
b1010 6
b1010 Y
b101000 9
b101000 P
1"
#115
0"
#120
b1011 6
b1011 Y
b101100 9
b101100 P
1"
#125
0"
#130
b1100 6
b1100 Y
b110000 9
b110000 P
1"
#135
0"
#140
b1101 6
b1101 Y
b110100 9
b110100 P
1"
#145
0"
